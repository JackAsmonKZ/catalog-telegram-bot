import { Markup } from "telegraf";

const PAGE_SIZE = 5;

function pageCount(products) {
  return Math.max(1, Math.ceil(products.length / PAGE_SIZE));
}

function getPage(products, page) {
  const p = Math.max(1, Math.min(page, pageCount(products)));
  const start = (p - 1) * PAGE_SIZE;
  return products.slice(start, start + PAGE_SIZE);
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–º–∞ —Ç–æ–≤–∞—Ä–∞
export function buildVolumeSelectionKeyboard(
  product,
  page,
  source = "catalog",
  categoryId = null
) {
  const keyboard = [];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞—Å—Å–∏–≤ —Ü–µ–Ω
  if (
    !product.prices ||
    !Array.isArray(product.prices) ||
    product.prices.length === 0
  ) {
    // –ï—Å–ª–∏ –Ω–µ—Ç prices, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    keyboard.push([
      Markup.button.callback("‚ö†Ô∏è –¶–µ–Ω—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã", "error_no_prices"),
    ]);
  } else {
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–º–∞
    product.prices.forEach((priceObj) => {
      keyboard.push([
        Markup.button.callback(
          `${priceObj.volume} ‚Äî ${priceObj.price}`,
          `select_volume_${product.id}_${priceObj.volume}_${page}_${source}_${
            categoryId || "none"
          }`
        ),
      ]);
    });
  }

  // –ö–Ω–æ–ø–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
  keyboard.push([Markup.button.callback("üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", "view_cart")]);

  // –ö–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
  if (source === "catalog") {
    if (categoryId && categoryId !== "none") {
      keyboard.push([
        Markup.button.callback(
          "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
          `category_back_${categoryId}_${page}`
        ),
        Markup.button.callback("‚¨ÖÔ∏è –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "show_categories"),
      ]);
    } else {
      keyboard.push([
        Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", "show_categories"),
      ]);
    }
  } else if (source === "search") {
    keyboard.push([
      Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", "show_categories"),
    ]);
  }

  return Markup.inlineKeyboard(keyboard);
}

export function buildCatalogKeyboard(products, page, categoryId = null) {
  const p = Math.max(1, Math.min(page, pageCount(products)));
  const items = getPage(products, p).map((prod) => {
    let priceText = "";
    if (prod.prices && Array.isArray(prod.prices) && prod.prices.length > 0) {
      if (prod.prices.length === 1) {
        priceText = prod.prices[0].price;
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–æ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã"
        priceText = `–æ—Ç ${prod.prices[0].price}`;
      }
    } else if (prod.price) {
      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
      priceText = prod.price;
    }
    return [
      Markup.button.callback(
        `${prod.title}${priceText ? ` ‚Äî ${priceText}` : ""}`,
        `product_${prod.id}_p${p}`
      ),
    ];
  });
  const controls = [];
  if (p > 1) controls.push(Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", `page_${p - 1}`));
  if (p < pageCount(products))
    controls.push(Markup.button.callback("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", `page_${p + 1}`));
  const keyboard = [...items];
  if (controls.length) keyboard.push(controls);

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º" –µ—Å–ª–∏ –º—ã –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  if (categoryId) {
    keyboard.push([
      Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", "show_categories"),
    ]);
  }

  return Markup.inlineKeyboard(keyboard);
}

export function buildMainKeyboard() {
  return Markup.keyboard([["üì¶ –ö–∞—Ç–∞–ª–æ–≥", "üõí –ö–æ—Ä–∑–∏–Ω–∞", "üîç –ü–æ–∏—Å–∫"]]).resize();
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
export function buildCategoriesKeyboard(categories, products, page = 1) {
  const CATEGORIES_PER_PAGE = 5;
  const keyboard = [];

  // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Ç–æ–≤–∞—Ä–∞–º–∏
  const allCategories = [];

  categories.forEach((category) => {
    const productCount = products.filter(
      (p) => String(p.category) === String(category.id)
    ).length;
    if (productCount > 0) {
      allCategories.push({
        name: category.name,
        id: category.id,
        count: productCount,
      });
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã
  const uncategorizedCount = products.filter((p) => {
    if (!p.category) return true;
    return !categories.find((c) => String(c.id) === String(p.category));
  }).length;

  if (uncategorizedCount > 0) {
    allCategories.push({
      name: "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
      id: "uncategorized",
      count: uncategorizedCount,
    });
  }

  // –í—ã—á–∏—Å–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
  const totalPages = Math.max(
    1,
    Math.ceil(allCategories.length / CATEGORIES_PER_PAGE)
  );
  const currentPage = Math.max(1, Math.min(page, totalPages));
  const startIndex = (currentPage - 1) * CATEGORIES_PER_PAGE;
  const endIndex = startIndex + CATEGORIES_PER_PAGE;

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const pageCategories = allCategories.slice(startIndex, endIndex);

  pageCategories.forEach((category) => {
    keyboard.push([
      Markup.button.callback(
        `${category.name} (${category.count})`,
        `category_${category.id}`
      ),
    ]);
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  const navigation = [];
  if (currentPage > 1) {
    navigation.push(
      Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", `categories_page_${currentPage - 1}`)
    );
  }
  if (currentPage < totalPages) {
    navigation.push(
      Markup.button.callback("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", `categories_page_${currentPage + 1}`)
    );
  }
  if (navigation.length > 0) {
    keyboard.push(navigation);
  }

  return Markup.inlineKeyboard(keyboard);
}

export function getProductKeyboard(
  productId,
  page,
  cart,
  source = "catalog",
  categoryId = null,
  selectedVolume = null
) {
  const keyboard = [];

  // –ï—Å–ª–∏ –æ–±—ä–µ–º –≤—ã–±—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π
  if (selectedVolume) {
    const cartKey = `${productId}_${selectedVolume}`;
    const quantity = cart.get(cartKey) || 0;

    if (quantity === 0) {
      keyboard.push([
        Markup.button.callback(
          "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
          `add_to_cart_${productId}_${selectedVolume}_${page}_${source}_${
            categoryId || "none"
          }`
        ),
      ]);
    } else {
      keyboard.push([
        Markup.button.callback(
          "-",
          `cart_dec_${productId}_${selectedVolume}_${page}_${source}_${
            categoryId || "none"
          }`
        ),
        Markup.button.callback(`${quantity}`, `cart_noop`),
        Markup.button.callback(
          "+",
          `cart_inc_${productId}_${selectedVolume}_${page}_${source}_${
            categoryId || "none"
          }`
        ),
      ]);
      keyboard.push([
        Markup.button.callback(
          "üóë –£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã",
          `remove_from_cart_${productId}_${selectedVolume}_${page}_${source}_${
            categoryId || "none"
          }`
        ),
      ]);
    }

    // –ö–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –æ–±—ä–µ–º"
    keyboard.push([
      Markup.button.callback(
        "‚Ü©Ô∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –æ–±—ä–µ–º",
        `product_${productId}_p${page}`
      ),
    ]);
  }

  keyboard.push([Markup.button.callback("üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", "view_cart")]);
  if (source === "catalog") {
    if (categoryId && categoryId !== "none") {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–µ–π
      keyboard.push([
        Markup.button.callback(
          "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
          `category_back_${categoryId}_${page}`
        ),
        Markup.button.callback("‚¨ÖÔ∏è –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "show_categories"),
      ]);
    } else {
      // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç - –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      keyboard.push([
        Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", "show_categories"),
      ]);
    }
  } else if (source === "search") {
    keyboard.push([
      Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", "back_to_search"),
      Markup.button.callback("‚¨ÖÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "show_categories"),
    ]);
  }
  return Markup.inlineKeyboard(keyboard);
}
