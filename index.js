import { Telegraf, Markup } from "telegraf";
import dotenv from "dotenv";
import fs from "fs-extra";
import {
  buildCatalogKeyboard,
  getProductKeyboard,
} from "./commands/keyboards.js";
import {
  getCart,
  isAdmin,
  saveProducts,
  sendProductWithPhoto,
  generateNewProductId,
} from "./commands/utils.js";
import { registerAdminHandlers } from "./admin.js";
import { registerCartHandlers } from "./commands/cart.js";
import { registerSearchHandlers } from "./commands/search.js";
import { showCart, showCatalog } from "./commands/catalogHandlers.js";

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_ID = process.env.ADMIN_ID;
const dbPath = "./products.json";

if (!BOT_TOKEN) {
  console.error("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ .env");
  process.exit(1);
}

if (!ADMIN_ID) {
  console.warn("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ .env");
  console.warn(
    "   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
  );
} else {
  console.log(`‚úÖ ADMIN_ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${ADMIN_ID}`);
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
const bot = new Telegraf(BOT_TOKEN);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
const state = {
  products: [],
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
async function loadProducts() {
  try {
    if (await fs.pathExists(dbPath)) {
      const data = await fs.readJson(dbPath);
      state.products = Array.isArray(data) ? data : [];
      console.log(
        `‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${state.products.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`
      );
    } else {
      await fs.writeJson(dbPath, []);
      console.log("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö");
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", error);
    state.products = [];
  }
}

export function registerCatalogHandlers(bot, state, dbPath, ADMIN_ID) {
  const searchState = new Map();
  const searchResults = new Map();
  const userCarts = new Map();
  const adminState = new Map();

  registerAdminHandlers(bot, state, dbPath, ADMIN_ID, adminState);
  registerCartHandlers(bot, state, userCarts, ADMIN_ID);
  registerSearchHandlers(bot, state, searchState, searchResults, userCarts);

  bot.command("catalog", (ctx) => {
    showCatalog(ctx, state, 1);
  });

  bot.action(/^page_(\d+)$/, async (ctx) => {
    const page = Number(ctx.match[1]);
    try {
      await ctx.editMessageText("–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:", {
        reply_markup: buildCatalogKeyboard(state.products, page).reply_markup,
      });
      await ctx.answerCbQuery();
    } catch {
      await ctx.reply(
        "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:",
        buildCatalogKeyboard(state.products, page)
      );
      await ctx.answerCbQuery();
    }
  });

  bot.action(/^catalog_back_(\d+)$/, async (ctx) => {
    const page = Number(ctx.match[1]);
    // –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
    await ctx.reply(
      "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:",
      buildCatalogKeyboard(state.products, page)
    );
    await ctx.answerCbQuery();
  });

  bot.action(/^product_(.+)_p(\d+)$/, async (ctx) => {
    const id = ctx.match[1];
    const page = Number(ctx.match[2]);
    const prod = state.products.find((p) => String(p.id) === String(id));
    if (!prod) {
      await ctx.answerCbQuery("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", { show_alert: true });
      return;
    }
    const cart = getCart(userCarts, ctx.from.id);
    const kb = getProductKeyboard(prod.id, page, cart, "catalog");
    await sendProductWithPhoto(ctx, prod, kb, true);
    await ctx.answerCbQuery();
  });

  bot.on("text", async (ctx, next) => {
    const text = String(ctx.message.text).trim();
    if (text === "üì¶ –ö–∞—Ç–∞–ª–æ–≥" || text.toLowerCase() === "–∫–∞—Ç–∞–ª–æ–≥") {
      await showCatalog(ctx, state, 1);
      return;
    }
    if (text === "üõí –ö–æ—Ä–∑–∏–Ω–∞" || text.toLowerCase() === "–∫–æ—Ä–∑–∏–Ω–∞") {
      await showCart(ctx, state, userCarts);
      return;
    }
    if (text === "üîç –ü–æ–∏—Å–∫" || text.toLowerCase() === "–ø–æ–∏—Å–∫") {
      searchState.set(ctx.from.id, { waitingForQuery: true });
      await ctx.reply(
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        Markup.inlineKeyboard([
          [Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_search")],
        ])
      );
      return;
    }
    // –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    if (text === "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä") {
      if (!isAdmin(ADMIN_ID, ctx)) {
        await ctx.reply("‚õîÔ∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
        return;
      }
      adminState.set(ctx.from.id, { awaiting_add: true });
      await ctx.reply(
        '–ü—Ä–∏—à–ª–∏ JSON —Ç–æ–≤–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (ID –Ω–∞–∑–Ω–∞—á–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏):\n{"title":"...","price":"...","description":"...","photo":"..."}\n\n–ü–æ–ª–µ photo –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ.'
      );
      return;
    }
    if (text === "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ") {
      if (!isAdmin(ADMIN_ID, ctx)) {
        await ctx.reply("‚õîÔ∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
        return;
      }
      if (state.products.length === 0) {
        await ctx.reply(
          "–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"
        );
        return;
      }
      const keyboard = state.products.map((p) => [
        Markup.button.callback(`‚úèÔ∏è ${p.title}`, `admin_edit_${p.id}`),
        Markup.button.callback(`üóë ${p.title}`, `admin_delete_${p.id}`),
      ]);
      await ctx.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:",
        Markup.inlineKeyboard(keyboard)
      );
      return;
    }
    const adminSt = adminState.get(ctx.from.id);
    if (adminSt?.awaiting_add && isAdmin(ADMIN_ID, ctx)) {
      adminState.delete(ctx.from.id);
      try {
        const obj = JSON.parse(ctx.message.text);
        if (!obj.title) {
          await ctx.reply("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º –ø–æ–ª–µ title.");
          return;
        }
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        const newId = generateNewProductId(state.products);
        const newProduct = {
          id: newId,
          ...obj,
        };
        state.products.push(newProduct);
        await saveProducts(dbPath, state.products);
        await ctx.reply(
          `‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω —Å ID: ${newId}\n\n${JSON.stringify(
            newProduct,
            null,
            2
          )}`
        );
      } catch {
        await ctx.reply("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä–Ω—ã–π.");
      }
      return;
    }
    if (adminSt?.awaiting_edit && isAdmin(ADMIN_ID, ctx)) {
      const editId = adminSt.awaiting_edit;
      adminState.delete(ctx.from.id);
      try {
        const obj = JSON.parse(ctx.message.text);
        if (!obj.title) {
          await ctx.reply("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º –ø–æ–ª–µ title.");
          return;
        }
        const idx = state.products.findIndex(
          (p) => String(p.id) === String(editId)
        );
        if (idx === -1) {
          await ctx.reply("–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.");
          return;
        }
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        state.products[idx] = {
          id: editId,
          ...obj,
        };
        await saveProducts(dbPath, state.products);
        await ctx.reply(
          `‚úÖ –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω:\n\n${JSON.stringify(
            state.products[idx],
            null,
            2
          )}`
        );
      } catch {
        await ctx.reply("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä–Ω—ã–π.");
      }
      return;
    }
    if (adminSt?.awaiting_delete && isAdmin(ADMIN_ID, ctx)) {
      adminState.delete(ctx.from.id);
      const id = ctx.message.text.trim();
      const idx = state.products.findIndex((p) => String(p.id) === String(id));
      if (idx === -1) {
        await ctx.reply("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
      }
      state.products.splice(idx, 1);
      await saveProducts(dbPath, state.products);
      await ctx.reply("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω.");
      return;
    }
    const userState = searchState.get(ctx.from.id);
    if (!userState?.waitingForQuery) {
      return next();
    }
    searchState.delete(ctx.from.id);
    const query = ctx.message.text.toLowerCase().trim();
    const results = state.products.filter(
      (p) =>
        p.title?.toLowerCase().includes(query) ||
        p.description?.toLowerCase().includes(query)
    );
    if (results.length === 0) {
      await ctx.reply(
        `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${ctx.message.text}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`,
        Markup.inlineKeyboard([
          [Markup.button.callback("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥", "catalog_back_1")],
          [Markup.button.callback("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", "search")],
        ])
      );
      return;
    }
    searchResults.set(ctx.from.id, { results, query: ctx.message.text });
    const textOut = `–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${results.length}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:`;
    const keyboard = results.map((prod) => [
      Markup.button.callback(
        `${prod.title} ‚Äî ${prod.price || ""}`,
        `search_product_${prod.id}`
      ),
    ]);
    keyboard.push([
      Markup.button.callback("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥", "catalog_back_1"),
    ]);
    keyboard.push([Markup.button.callback("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", "search")]);
    await ctx.reply(textOut, Markup.inlineKeyboard(keyboard));
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async function main() {
  try {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    await loadProducts();

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    registerCatalogHandlers(bot, state, dbPath, ADMIN_ID);

    // –ö–æ–º–∞–Ω–¥–∞ /start
    bot.start((ctx) => {
      const isAdminUser = isAdmin(ADMIN_ID, ctx);

      let keyboard;
      if (isAdminUser) {
        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
        keyboard = Markup.keyboard([
          ["üì¶ –ö–∞—Ç–∞–ª–æ–≥", "üõí –ö–æ—Ä–∑–∏–Ω–∞"],
          ["üîç –ü–æ–∏—Å–∫"],
          ["‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"],
        ]).resize();
      } else {
        // –û–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard = Markup.keyboard([
          ["üì¶ –ö–∞—Ç–∞–ª–æ–≥", "üõí –ö–æ—Ä–∑–∏–Ω–∞"],
          ["üîç –ü–æ–∏—Å–∫"],
        ]).resize();
      }

      const message = isAdminUser
        ? `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! üëã\n\n–≠—Ç–æ –±–æ—Ç-–∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤.\n\nüîß –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–µ–Ω.`
        : `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! üëã\n\n–≠—Ç–æ –±–æ—Ç-–∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤.\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:`;

      ctx.reply(message, keyboard);
    });

    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await bot.launch();
    console.log("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!");

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
    process.once("SIGINT", () => {
      console.log("\n‚èπ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...");
      bot.stop("SIGINT");
    });

    process.once("SIGTERM", () => {
      console.log("\n‚èπ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...");
      bot.stop("SIGTERM");
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:", error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
main();
