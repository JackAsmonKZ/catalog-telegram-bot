import { Markup } from "telegraf";
import {
  isAdmin,
  saveProducts,
  saveCategories,
  generateNewCategoryId,
  deleteCategoryAndUpdateProducts,
} from "./commands/utils.js";

export function registerAdminHandlers(
  bot,
  state,
  dbPath,
  categoriesPath,
  ADMIN_ID,
  adminState
) {
  bot.command("add", (ctx) => {
    if (!isAdmin(ADMIN_ID, ctx)) {
      ctx.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.");
      return;
    }
    adminState.set(ctx.from.id, { awaiting_add: true });

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    let categoriesText = "\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n";
    state.categories.forEach((cat) => {
      categoriesText += `‚Ä¢ ${cat.id} ‚Äî ${cat.name}\n`;
    });

    ctx.reply(
      `–ü—Ä–∏—à–ª–∏ JSON —Ç–æ–≤–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (ID –Ω–∞–∑–Ω–∞—á–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏):
{"title":"...","price":"...","description":"...","photo":"...","category":"ID_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"}

–ü–æ–ª—è photo –∏ category –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ.${categoriesText}`
    );
  });

  bot.command("edit", async (ctx) => {
    if (!isAdmin(ADMIN_ID, ctx)) {
      ctx.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.");
      return;
    }
    if (state.products.length === 0) {
      ctx.reply("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.");
      return;
    }
    const keyboard = state.products.map((p) => [
      Markup.button.callback(`‚úèÔ∏è ${p.title}`, `admin_edit_${p.id}`),
      Markup.button.callback(`üóë ${p.title}`, `admin_delete_${p.id}`),
    ]);
    try {
      await ctx.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:",
        Markup.inlineKeyboard(keyboard)
      );
    } catch {
      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:");
    }
  });

  bot.command("delete", (ctx) => {
    if (!isAdmin(ADMIN_ID, ctx)) {
      ctx.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.");
      return;
    }
    adminState.set(ctx.from.id, { awaiting_delete: true });
    ctx.reply("–û—Ç–ø—Ä–∞–≤—å id —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
  });

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ (–ù–ï –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º negative lookahead)
  bot.action(/^admin_delete_(?!cat_)(.+)$/, async (ctx) => {
    if (!isAdmin(ADMIN_ID, ctx)) {
      await ctx.answerCbQuery("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.", { show_alert: true });
      return;
    }
    const id = ctx.match[1];
    console.log(`–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ID: ${id}`);
    const idx = state.products.findIndex((p) => String(p.id) === String(id));
    if (idx === -1) {
      await ctx.answerCbQuery("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", { show_alert: true });
      return;
    }
    state.products.splice(idx, 1);
    await saveProducts(dbPath, state.products);
    try {
      await ctx.editMessageText("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω");
    } catch {}
    await ctx.answerCbQuery("–£–¥–∞–ª–µ–Ω–æ");
  });

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ (–ù–ï –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º negative lookahead)
  bot.action(/^admin_edit_(?!cat_)(.+)$/, async (ctx) => {
    if (!isAdmin(ADMIN_ID, ctx)) {
      await ctx.answerCbQuery("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.", { show_alert: true });
      return;
    }
    const id = ctx.match[1];
    console.log(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ID: ${id}`);
    const prod = state.products.find((p) => String(p.id) === String(id));
    if (!prod) {
      await ctx.answerCbQuery("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", { show_alert: true });
      return;
    }
    adminState.set(ctx.from.id, { awaiting_edit: id });
    await ctx.reply(
      `–û—Ç–ø—Ä–∞–≤—å JSON —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º —Ç–æ–≤–∞—Ä–æ–º –¥–ª—è ID=${id} (ID –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è).\n\n–¢–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç:\n${JSON.stringify(
        prod,
        null,
        2
      )}\n\n–ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –ø–æ–ª—è "id", –æ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.`
    );
    await ctx.answerCbQuery();
  });

  bot.command("list", async (ctx) => {
    if (!isAdmin(ADMIN_ID, ctx)) {
      await ctx.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.");
      return;
    }
    if (state.products.length === 0) {
      await ctx.reply("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.");
      return;
    }
    let text = state.products.map((p) => `id: ${p.id} ‚Äî ${p.title}`).join("\n");
    const keyboard = state.products.map((p) => [
      Markup.button.callback(`‚úèÔ∏è ${p.id}`, `admin_edit_${p.id}`),
      Markup.button.callback(`üóë ${p.id}`, `admin_delete_${p.id}`),
    ]);
    try {
      await ctx.reply(text, Markup.inlineKeyboard(keyboard));
    } catch {
      await ctx.reply(text);
    }
  });

  // ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò ====================

  bot.command("addcat", (ctx) => {
    if (!isAdmin(ADMIN_ID, ctx)) {
      ctx.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.");
      return;
    }
    adminState.set(ctx.from.id, { awaiting_add_category: true });
    ctx.reply(
      '–ü—Ä–∏—à–ª–∏ JSON –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (ID –Ω–∞–∑–Ω–∞—á–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏):\n{"name":"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"}'
    );
  });

  bot.command("listcat", async (ctx) => {
    if (!isAdmin(ADMIN_ID, ctx)) {
      await ctx.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.");
      return;
    }
    if (state.categories.length === 0) {
      await ctx.reply("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç.");
      return;
    }
    let text = state.categories
      .map((c) => {
        const count = state.products.filter(
          (p) => String(p.category) === String(c.id)
        ).length;
        return `ID: ${c.id} ‚Äî ${c.name} (${count} —Ç–æ–≤–∞—Ä–æ–≤)`;
      })
      .join("\n");
    const keyboard = state.categories.map((c) => [
      Markup.button.callback(`üóë ${c.name}`, `admin_delete_cat_${c.id}`),
    ]);
    try {
      await ctx.reply(
        `üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n\n${text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:`,
        Markup.inlineKeyboard(keyboard)
      );
    } catch {
      await ctx.reply(text);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  bot.action(/^admin_delete_cat_(.+)$/, async (ctx) => {
    if (!isAdmin(ADMIN_ID, ctx)) {
      await ctx.answerCbQuery("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.", { show_alert: true });
      return;
    }
    const id = ctx.match[1];
    console.log(`–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ID: ${id}`);

    const result = await deleteCategoryAndUpdateProducts(
      state.categories,
      state.products,
      id,
      categoriesPath,
      dbPath
    );

    console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è:", result);

    if (result.success) {
      try {
        await ctx.editMessageText(result.message, {
          reply_markup: { inline_keyboard: [] },
        });
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err.message);
        await ctx.reply(result.message);
      }
      await ctx.answerCbQuery("–£–¥–∞–ª–µ–Ω–æ");
    } else {
      await ctx.answerCbQuery(result.message, { show_alert: true });
    }
  });
}
